var winston = require('winston');
// var winstonRedis = require('winston-redis');
var streamer = require('./redis_stream');

var logger = new (winston.Logger)({
  transports: [
    new (winston.transports.Redis)({ container: 'test_container_yo' })
  ]
});

console.log(logger);

// Generated by CoffeeScript 1.4.0
(function() {
  var MonitoredChild, async, bounceInterval, bounceWait, child_process, delayTimeout, healthCheckInterval, _;

  _ = require('lodash');

  child_process = require('child_process');

  async = require('async');

  healthCheckInterval = 60 * 1000;

  bounceInterval = 60 * 1000;

  bounceWait = bounceInterval + 30 * 1000;

  delayTimeout = function(ms, func) {
    return setTimeout(func, ms);
  };

  MonitoredChild = (function() {

    function MonitoredChild(script, port, healthCheck, environmentVariables) {
      this.script = script;
      this.port = port;
      this.healthCheck = healthCheck;
      this.environmentVariables = environmentVariables;
      this.currentChild = null;
      this.healthCheckTimeout = null;
      this.bounceTimeout = null;
      this.expectedExit = false;

      this.respawns = 0;
      this.respawnsMax = 5;
      this.respawnTimer = 0;
      this.respawnTimerMax = 5000;
    }

    MonitoredChild.prototype.bounce = function() {
      var _this = this;
      if (this.currentChild == null) {
        return this.respawn();
      }
      console.log("Requested bounce of " + this.currentChild.pid + ", port " + this.port);
      clearTimeout(this.healthCheckTimeout);
      this.expectedExit = true;
      this.currentChild.kill();
      return this.bounceTimeout = delayTimeout(bounceInterval, function() {
        console.error("Child did not exit in time, forcefully killing it");
        return _this.currentChild.kill("SIGKILL");
      });
    };

    MonitoredChild.prototype.delayedHealthCheck = function() {
      var _this = this;
      return this.healthCheckTimeout = delayTimeout(5000, function() {
        _this.respawns = 0;
        var start;
        start = new Date();
        return _this.healthCheck(_this.port, function(healthy) {
          if (healthy) {
            console.log("" + _this.port + " is healthy - ping time " + (new Date() - start) + "ms");
            return _this.delayedHealthCheck();
          } else {
            console.error("" + _this.port + " did not respond in time, killing it harshly");
            return _this.currentChild.kill("SIGKILL");
          }
        });
      });
    };

    MonitoredChild.prototype.respawn = function() {
      var _this = this;

      if (this.respawns == 0) {
        this.respawns++;
        this.respawnTimer = new Date();
      } else {
        this.respawns++;
        if (this.respawns > this.respawnsMax &&
            (new Date - this.respawnTimer) < this.respawnTimerMax) {
          console.error('Too many attempted restarts, exiting');
          process.exit(1);
        }
      }

      this.currentChild = child_process.spawn(process.execPath, [this.script], {
        env: _.extend(this.environmentVariables, process.env)
      });
      console.log("Started child", {
        port: this.port,
        pid: this.currentChild.pid
      });

      this.currentChild.stdout.pipe(logger.transports.redis);
      this.currentChild.stderr.pipe(process.stderr);
      this.currentChild.on('exit', function(code, signal) {
        if (_this.healthCheckTimeout != null) {
          clearTimeout(_this.healthCheckTimeout);
        }
        if (_this.bounceTimeout != null) {
          clearTimeout(_this.bounceTimeout);
        }
        if (_this.expectedExit) {
          _this.expectedExit = false;
          console.info("Expected exit from child " + _this.currentChild.pid + ", port " + _this.port + " - respawning");
        } else {
          console.error("Child " + _this.currentChild.pid + ", port " + _this.port + " exited with code " + code + ", signal " + signal + ", respawning");
        }
        return _this.respawn();
      });
      return this.delayedHealthCheck();
    };

    return MonitoredChild;

  })();

  exports.bounceChildren = function(monitoredChildren, callback) {
    return async.forEachSeries(monitoredChildren, function(monitoredChild, seriesCallback) {
      monitoredChild.bounce();
      return delayTimeout(bounceWait, seriesCallback);
    }, callback);
  };

  exports.spawnMonitoredChild = function(script, port, healthCheck, environmentVariables) {
    var ret;
    ret = new MonitoredChild(script, port, healthCheck, environmentVariables);
    ret.respawn();
    return ret;
  };

}).call(this);
